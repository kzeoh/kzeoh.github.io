[{"content":"블로그 만들기 시리즈 눌러서 열기 1. Hugo로 블로그 만들기 2. Github 페이지 연결하기 3. Giscus(댓글) 연결하기 Giscus란? Github Discussions로 작동하는 댓글 시스템인데요. utterances에서 영감을 받아 시작된 프로젝트입니다!\n22년 7월 1일 기준 Giscus 공식 레포의 Star가 2.4k개로 상당히 많은 활동적인 프로젝트란 걸 알 수 있죠.\n아마 다른 개발자 블로그도 방문해보신 분들은 Giscus 이외에 uterrances나disqus를 사용한 댓글 시스템을 많이 보셨을거에요. 그럼 각각의 장단이 뭔지 간단히 소개해드릴게요.\nDisqus Disqus는 해외에서도 많이 사용되는 댓글 시스템인데요. SNS를 통한 로그인으로 댓글을 남길 수 있다는 점에서 많이들 애용하신 걸로 알고 있습니다.\n하지만 2021년 1월을 기준으로 댓글 창에 강제적으로 광고가 붙게됐죠. 이 광고를 없애려면 매달 요금을 지불해야합니다.\n광고가 붙게되면 시각적으로 블로그가 지저분해지는 요소도 있지만 OpenSource가 아니라는 점에서도 마이너스 요소였습니다.\nUtterance Github Issue를 활용해서 댓글 위젯을 만들어 주는 시스템입니다. Github Issue를 활용하다 보니 Github 계정으로 로그인해서 댓글을 달 수 있습니다. 그러다보니 개발자가 아니면 댓글을 남길 수 없다는 점에서는 아쉬움이 남습니다. 많은 블로그에서 Disqus 다음으로 많이들 쓰고 있는데요. Utterance도 제 리뉴얼 전 블로그에서 썻지만 Githug 레포에 계속 Open 이슈가 생긴다는 점. 그리고 이슈 커멘트가 계속 달린다는 점에서 불편함이 있었어요. 그래도 Github Issue를 기반으로 생성되다 보니 Markdown을 지원한다는 점에서 매우 유용합니다!\nGiscus 자 이제 Giscus에 대해 소개를 해볼게요. Giscus는 Utterance와 매우 유사하게 Github 로그인을 통해 댓글을 남길 수 있다는 점. 그리고 Markdown을 지원한다는 점의 공통점이 있는데요.\n그럼 어떤 점이 다르냐?\n그건 바로 Github의 Discussion을 활용한다는 점입니다. Github Discussion 기능은 2020년 부터 시작되었는데요. OpenSource 커뮤니티와 개발자들 간의 커뮤니케이션 그리고 회사 내 enterprise 환경에서도 더 적극적인 커뮤니케이션 지원을 위해 도입된 Github의 기능입니다. Github Discussion을 활용하다 보니 대댓글도 만들어지고 포스트 반응 추가도 가능하더라고요! 여러분도 한번 이 포스트에 편하게 테스트 해보세요 ㅎㅎ Giscus 블로그에 연결하기 Giscus에 연결할 레포지토리 세팅 Giscus를 연결한 레포지토리를 세팅하기 위해선 3가지를 확인해야해요.\nPublic 레포지토리이다. Giscus 앱이 레포지토리에 설치되어 있어야 한다. Discussion 기능이 활성화 되어 있어야 한다. 1. Public 레포지토리 설정 우선 레포지토리 명 우측에 Public이라고 적혀있는지 확인해보세요!\n만약 안되어 있으면 아래 순서대로 설정하시면 됩니다.\nGiscus를 연결한 레포지토리로 이동합니다. 레포지토리명 아래에 Settings를 클릭합니다. 아래로 스크롤 하시면 Danger Zone이 나오는데요. 거기서 Change visibility를 클릭합니다. Make public 설정을 하시면 됩니다! 2. Giscus 앱 설치 https://github.com/apps/giscus에 접속합니다. Configure를 누르고 진행하시다 보면 repository 선택 화면이 나옵니다. 전체 레포지토리를 다 선택하셔도 되고 특정 레포지토리만 선택해도 됩니다. (이건 추후에 수정이 가능해요) 그리고 Request를 클릭! 완료된 것을 확인합니다! 3. Discussion 기능 활성화 위에서 Giscus 앱을 설치한 레포지토리의 Setting으로 이동합니다. 그리고 아래로 스크롤을 내리시다보면 Features 아래에 Discussions 체크박스가 있습니다. 체크박스를 클릭합니다! Discussions 탭이 생긴걸 확인하고 눌러봅니다. 왼쪽에 Categories를 추가하거나 아니면 있는걸 그대로 사용해도 됩니다. 이 Category 중 한 곳을 지정해서 Giscus 댓글들이 오픈되게 됩니다. 블로그 Giscus 연결 이제 이 부분이 핵심인데요. 사실 블로그의 theme마다 Giscus를 이미 자체적으로 지원 하는 곳도 있고 활성화를 시키더라도 Giscus 연동이 안되는(보통 rendering 문제가 아닐까 싶습니다) 경우도 있을 수 있어요.\n이 부분은 만약 안된다면 사용하시는 theme 레포지토리에 가서 확인하시길 바랍니다.\n\u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34; data-repo=\u0026#34;[ENTER REPO HERE]\u0026#34; data-repo-id=\u0026#34;[ENTER REPO ID HERE]\u0026#34; data-category=\u0026#34;[ENTER CATEGORY NAME HERE]\u0026#34; data-category-id=\u0026#34;[ENTER CATEGORY ID HERE]\u0026#34; data-mapping=\u0026#34;pathname\u0026#34; data-reactions-enabled=\u0026#34;1\u0026#34; data-emit-metadata=\u0026#34;0\u0026#34; data-input-position=\u0026#34;bottom\u0026#34; data-theme=\u0026#34;light\u0026#34; data-lang=\u0026#34;ko\u0026#34; data-loading=\u0026#34;lazy\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; 위 형태의 js script를 여러분이 사용하시는 theme의 layouts으로 추가를 하면 되는데요. 레포지토리의 id나 카테고리의 id가 뭔지를 잘 모르실 수 있는데 https://giscus.app/ko 여기의 설정 부분에 가시면 위 형태의 템플릿 스크립트를 손쉽게 만드실 수 있어요! 그리고 완성된 스크립트를 layouts/partials/comments.html에 추가해봅니다! 여기까지 잘 설정하셨으면 블로그 포스트 하단에 댓글 창이 생기신걸 확인하실 수 있어요!\n더 우아하게 만들어보자 Masking 이런 repo-id나 category-id 같은 경우에는 바로 html에 넣는 것보다 config.yaml의 파라미터로 넘겨주는 방식이 보안적인 측면이나 민감한 정보를 보호하는 측면에서 더 좋을 수 있을텐데요. 그런건 손쉽게 아래와 같이 수정하면 간단히 가능해요!\n\u0026lt;!-- comments.html --\u0026gt; \u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34; data-repo={{ .Site.Params.giscus.repo }} data-repo-id={{ .Site.Params.giscus.repoId }} data-category={{ .Site.Params.giscus.category }} data-category-id={{ .Site.Params.giscus.categoryId }} data-mapping={{ .Site.Params.giscus.mapping }} data-reactions-enabled={{ .Site.Params.giscus.reactions_enabled | default 1 }} data-emit-metadata={{ .Site.Params.giscus.emit_metadata | default 0 }} data-input-position=\u0026#34;top\u0026#34; data-theme=\u0026#34;preferred_color_scheme\u0026#34; data-lang=\u0026#34;ko\u0026#34; data-loading=\u0026#34;lazy\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; # config.yaml params: giscus: repo: \u0026#34;my/repository\u0026#34; repoId: \u0026#34;myrepoid\u0026#34; category: \u0026#34;Comments\u0026#34; categoryId: \u0026#34;categoryid\u0026#34; mapping: \u0026#34;pathname\u0026#34; reactions-enabled: \u0026#34;1\u0026#34; input-position: \u0026#34;top\u0026#34; 마치며 이외에도 여러분들이 사용하시는 theme에 맞게 css를 수정해서 적용도 해보고 적극적으로 custom화 하는 것도 하나의 재미 요소입니다! 저 같은 경우에는 PaperMod theme에는 Light/Dark 모드 변경이 되는데 이에 맞춰 댓글 창의 theme도 수정되도록 커스텀화 해봤어요~\n다음에는 여러분들의 만든 hugo 블로그 코드를 private 레포지토리에 올려놓고 Github Action을 통해 public 레포지토리에 자동으로 static website로 배포해주는 방법에 대해 소개해드리겠습니다.\n이건 여러분들의 config.yaml을 공개 레포에 올리지 않아도 된다는 점에서 매우 유용해요! 그래서 꼭 따라해보시길 바랍니다ㅎㅎ\n","permalink":"https://kzeoh.github.io/posts/make-blog3/","summary":"블로그 만들기 시리즈 눌러서 열기 1. Hugo로 블로그 만들기 2. Github 페이지 연결하기 3. Giscus(댓글) 연결하기 Giscus란? Github Discussions","title":"Giscus Hugo 블로그에 연결하기"},{"content":"블로그 만들기 시리즈 눌러서 열기 1. Hugo로 블로그 만들기 2. Github 페이지 연결하기 3. Giscus(댓글) 연결하기 Hugo를 Github Page(개인 블로그)로 배포하고 이 배포 과정을 Github Action Workflow를 통해 자동화 하는 법에 대해 소개하겠습니다.\n사전 준비 git 2.8 이상 github 계정 배포 준비가 된 Hugo로 만든 website (아직 없다면 여기를 참고하세요) Github Pages Github Pages는 두가지 형태로 제공이 되는데요.\nUser/Organization Pages (https://\u0026lt;USERNAME|ORGANIZATION\u0026gt;.github.io/) Project Pages (https://\u0026lt;USERNAME|ORGANIZATION\u0026gt;.github.io/\u0026lt;PROJECT\u0026gt;/) 위 두가지 방식 중 저희는 대중적으로 많이 활용하는 User Pages로 블로그를 생성해봅시다!\n블로그의 주소는 최종적으로 https://\u0026lt;USERNAME\u0026gt;.github.io/ 가 됩니다.\nGithub Repository 만들기 \u0026lt;USERNAME\u0026gt;.github.io 라는 레포를 만들고 main 브랜치에 hugo 블로그 코드를 올립니다.\n이때 hugo -D를 통해 생성한 ./public 파일들을 올리는 것이 아닌 hugo new site myblog를 통해 만든 Hugo site를 올리면 됩니다. config.yaml이 포함되어 있겠죠?\nGithub Action 만들기 CI/CD 툴로 이전에는 Jenkins를 많이 활용했었지만 Github Action 등장 이후로는 모두가 넘어가고 있는 것 같아요.\n그만큼 편리하고 Jenkins보다 친화적이라고 생각합니다. 다음에 한번 Github Action도 자세히 다뤄보도록 할게요~\n이번에는 Github Action으로 Hugo 사이트를 자동으로 빌드하고 Github Pages 생성 브랜치로 배포해주는 workflow를 만들어볼거예요.\n아래 workflow를 .github/workflows/gh-pages.yml에 추가하면 됩니다!\nname: github pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-20.04 steps: - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; # extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public 위 workflow 동작 방식을 설명드리자면 main 브랜치에 push가 발생할 때마다 main 브랜치의 코드를 빌드(hugo --minify)하고 gh-pages 브랜치로 배포합니다.\nGithub Pages 브랜치 설정 보통은 gh-pages 브랜치가 기본 Github Pages 브랜치로 설정되어 있지만 혹시 안되어 있으신 분은 해당 레포에서 Settings \u0026gt; Pages로 이동하시면 Source 브랜치를 설정할 수 있습니다.\n여기 브랜치를 gh-pages로 설정해주시면 됩니다! Hugo Config BaseUrl 수정 config.yaml 혹은 config.toml에 baseURL 필드를 https://\u0026lt;USERNAME\u0026gt;.github.io로 변경하면 됩니다!\nbaseURL: \u0026#34;https://\u0026lt;USERNAME\u0026gt;.github.io\u0026#34; 위 설정을 하지 않으면 동작하지 않으니 꼭 해주세요!\n그리고 바뀐 config 설정을 다시 main 브랜치에 push를 넣으면 Github Action에서 자동으로 배포하게 됩니다!\nAction 동작 과정은 레포의 Action 탭에서 확인하실 수 있어요!\n마치며 앞으로 다른 분들도 여러 분들의 블로그에 방문할 수 있게 됐습니다!\n여러분들도 많은 정보를 공유하고 이번 기회에 기록을 남겨보세요 ㅎㅎ 많은 도움이 된답니다.\n다음으로는 지금 제 포스트 하단에 댓글 창이 보이실텐데요. 이 댓글 창을 추가하는 방법과 Google Analytics 연동 방법 그리고 Hugo 블로그를 private 레포에 올렸을 때 public 레포로 배포하는 방법에 대해 소개드려보겠습니다.\n또 만나요!\n","permalink":"https://kzeoh.github.io/posts/make-blog2/","summary":"블로그 만들기 시리즈 눌러서 열기 1. Hugo로 블로그 만들기 2. Github 페이지 연결하기 3. Giscus(댓글) 연결하기 Hugo를 Github Page(개인 블로그)로 배포","title":"Hugo 블로그를 Github 페이지에 연결하기"},{"content":"블로그 만들기 시리즈 눌러서 열기 1. Hugo로 블로그 만들기 2. Github 페이지 연결하기 3. Giscus(댓글) 연결하기 많은 개발자 분들이 최근에는 자신의 블로그를 개설하는 것이 하나의 포트폴리오가 될 정도로 안하시는 분이 없는 것 같아요!\n개발자들은 또 좋은 정보가 있으면 공유하고자 하는 마인드셋이 갖추어진 분들이라 (오픈소스를 통한 쉐어링) 블로그에 많은 팁들을 공유해주시더라고요.\n저 또한 많은 분들이 자신의 블로그를 개설해서 자신을 드러내고 많은 정보를 같이 공유하면 좋겠다는 마음에 블로그를 만드는 법을 소개해보려고 합니다!\n전체적인 플로으로 Hugo라는 프레임워크를 통해 깃허브 블로그를 어떻게 만드는지에 대해 알려드리려고 하고요. 지금 제 블로그도 Hugo로 만들어 졌는데 어떤 과정으로 만들어 졌는지 하나씩 알려드릴게요~ 이 포스트에는 일단 Hugo로 static site를 만드는 법에 대해 소개합니다.\n사전 설치 환경은 macOS를 기준으로 설명드립니다!\n일단 Hugo로 블로그를 만들기 위해서는 git과 hugo를 설치해야 합니다.\n# 설치 $ brew install git $ brew install hugo # 확인 $ git version git version 2.36.1 $ hugo version hugo v0.100.2+extended darwin/amd64 BuildDate=unknown Hugo 사이트 만들기 # 작업 폴더로 이동 $ cd $WORK_DIR # hugo site 틀 생성 $ hugo new site myblog Congratulations! Your new Hugo site is created in /YOUR/WORKING/DIR/myblog. Just a few more steps and you\u0026#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; command. 2. Perhaps you want to add some content. You can add single files with \u0026#34;hugo new \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 3. Start the built-in live server via \u0026#34;hugo server\u0026#34;. Visit https://gohugo.io/ for quickstart guide and full documentation. myblog라는 디렉토리가 생겼을텐데요. 구조는 아래와 같습니다.\nmyblog $ tree -a ./ ./ ├── archetypes │ └── default.md ├── config.toml ├── content ├── data ├── layouts ├── public ├── static └── themes 7 directories, 2 files Theme 추가 이제 사이트에 적용할 theme을 직접 만들거나 이미 만들어진 템플릿을 쓸 수가 있는데요. hugo theme 같은 경우에는 많은 사용자들이 만들어논 이쁜 테마가 많아서 이미 만들어진 걸 활용하면 편합니다! hugo theme site에 가시면 여러 free 테마를 보실 수 있는데 이 튜토리얼에서는 hugo-theme-stack 테마를 적용해보겠습니다!\n참고로 블로그에 적용 중인 theme은 PaperMod입니다.\n$ pwd /YOUR/WORKING/DIR/myblog $ git init $ git clone https://github.com/CaiJimmy/hugo-theme-stack.git themes/hugo-theme-stack git submodule add를 활용하시면 git clone 보다 더 우아하게 테마를 적용하실 수 있습니다. (git repo 내에서 관리도 편하고요)\n그리고 config.toml을 열어 theme='hugo-theme-stack'을 추가해줍니다.\nbaseURL = \u0026#39;http://example.org/\u0026#39; languageCode = \u0026#39;en-us\u0026#39; title = \u0026#39;My New Hugo Site\u0026#39; theme = \u0026#39;hugo-theme-stack\u0026#39; 첫 포스트 추가 $ hugo new posts/first-post.md Content \u0026#34;/YOUR/WORKING/DIR/myblog/content/posts/first-post.md\u0026#34; created 위 명령어를 통해 first-post.md라는 파일이 만들어지고 이 파일의 내용을 살펴보면 아래와 같습니다. hugo에서 post들은 markdown으로 작성하게 됩니다! markdown은 개발자라면 익숙해지시는걸 권장드려요!!!\n--- title: \u0026#34;First Post\u0026#34; date: 2022-06-22T23:03:07+09:00 draft: true --- 여기서 draft는 실제 배포된 환경에서는 노출되지 않는데요. 임시 블로그 포스트 느낌이라고 보면 될 것 같아요.\nHugo server 시작 이제 지금까지 만들어진 내용이 어떻게 보이는지 확인을 해볼 차례입니다!\n$ hugo server -D Start building sites … hugo v0.100.2+extended darwin/amd64 BuildDate=unknown | EN -------------------+----- Pages | 10 Paginator pages | 0 Non-page files | 0 Static files | 0 Processed images | 5 Aliases | 4 Sitemaps | 1 Cleaned | 0 Built in 78 ms ... Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop hugo server -D를 입력하시면 hugo server가 시작됩니다. http://localhost:1313에 접속하시면 local 환경의 웹서버에서 어떻게 실행 중인지 확인이 가능해요! 그러면 위와 같이 블로그가 뜨는걸 확인하실 수 있습니다!\n테마 커스터마이징 테마를 커스터마이징 하려면 config.toml을 수정하시면 되는데요. 저는 toml보단 yaml 형태의 포맷이 더 익숙해서 config.yaml을 수정해서 커스터마이징 해보겠습니다. (Hugo에서는 yaml도 지원합니다) hugo-theme-stack에서 themes/hugo-theme-stack/exampleSite 디렉토리 예제로 제공해주는 config.yaml을 적용해보도록 할게요! 예제 config.yaml 그리고 추가로 예제 post들이 있어서 그것도 옮겨보겠습니다!\n$ cp themes/hugo-theme-stack/exampleSite/config.yaml ./ $ cp themes/hugo-theme-stack/exampleSite/content/ ./ 그리고 다시 hugo server -D를 실행하면 아래와 같이 블로그가 완성되는걸 보실 수 있습니다!! static page 웹사이트 구성 $ hugo -D 위 명령어를 수행하시면 ./public 디렉토리에 static site 코드를 생성해줍니다. 그럼 만들어진 이 코드를 배포해서 hosting 하면 자신의 블로그가 완성됩니다!\n마치며 다음 포스트에는 github page를 활용해서 hugo로 만든 static site를 호스팅 하는 법에 대해서 소개해드릴게요.\n그 전까지는 원하시는 블로그에 적용할 테마를 살펴보시고 커스터마이징 가능한 기능들을 살펴보시길 바래요!\n대부분 커스터마이징 가능한 기능들은 각 테마의 공식 github 레포에 자세히 설명되어 있는 경우가 많습니다 :)\n그리고 hugo로 포스트를 작성하는 법에도 익숙해지시면 좋습니다~\n다음 포스트에서 뵐게요\n","permalink":"https://kzeoh.github.io/posts/make-blog/","summary":"블로그 만들기 시리즈 눌러서 열기 1. Hugo로 블로그 만들기 2. Github 페이지 연결하기 3. Giscus(댓글) 연결하기 많은 개발자 분들이 최근에는 자신의 블로그를 개","title":"Hugo로 블로그 만들기"},{"content":"다시 블로그를 확인해보니 터져있네요\u0026hellip;\n터진김에 새로운 테마로 리뉴얼 작업을 들어가려고 합니다.\n블로그를 리뉴얼 작업을 진행하면서 hugo로 블로그를 어떻게 만드는지도 같이 소개해보겠습니다.\n","permalink":"https://kzeoh.github.io/posts/my-first-post/","summary":"다시 블로그를 확인해보니 터져있네요\u0026hellip; 터진김에 새로운 테마로 리뉴얼 작업을 들어가려고 합니다. 블로그를 리뉴얼 작업을 진행하면서 hugo로 블","title":"블로그 리뉴얼"}]