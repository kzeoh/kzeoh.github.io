[{"content":"블로그 만들기 시리즈 눌러서 열기 1. Hugo로 블로그 만들기 2. Github 페이지 연결하기 3. TBD Hugo를 Github Page(개인 블로그)로 배포하고 이 배포 과정을 Github Action Workflow를 통해 자동화 하는 법에 대해 소개하겠습니다.\n사전 준비 git 2.8 이상 github 계정 배포 준비가 된 Hugo로 만든 website (아직 없다면 여기를 참고하세요)a Github Pages Github Pages는 두가지 형태로 제공이 되는데요.\nUser/Organization Pages (https://\u0026lt;USERNAME|ORGANIZATION\u0026gt;.github.io/) Project Pages (https://\u0026lt;USERNAME|ORGANIZATION\u0026gt;.github.io//) 위 두가지 방식 중 저희는 대중적으로 많이 활용하는 User Pages로 블로그를 생성해봅시다! 블로그의 주소는 최종적으로 https://.github.io/ 가 됩니다. Github Repository 만들기 .github.io 이라는 레포를 만들고 main 브랜치에 hugo 블로그 코드를 올립니다. 이때 hugo -D를 통해 생성한 ./public 파일들을 올리는 것이 아닌 hugo new site myblog를 통해 만든 Hugo site를 올리면 됩니다. config.yaml이 포함되어 있겠죠?\nGithub Action 만들기 CI/CD 툴로 이전에는 Jenkins를 많이 활용했었지만 Github Action 등장 이후로는 모두가 넘어가고 있는 것 같아요. 그만큼 편리하고 Jenkins보다 친화적이라고 생각합니다. 다음에 한번 Github Action도 자세히 다뤄보도록 할게요~ 이번에는 Github Action으로 Hugo 사이트를 자동으로 빌드하고 Github Pages 생성 브랜치로 배포해주는 workflow를 만들어볼거예요.\n아래 workflow를 .github/workflows/gh-pages.yml에 추가하면 됩니다!\nname: github pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-20.04 steps: - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; # extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public 위 workflow 동작 방식을 설명드리자면 main 브랜치에 push가 발생할 때마다 main 브랜치의 코드를 빌드(hugo --minify)하고 gh-pages 브랜치로 배포합니다.\nGithub Pages 브랜치 설정 보통은 gh-pages 브랜치가 기본 Github Pages 브랜치로 설정되어 있지만 혹시 안되어 있으신 분은 해당 레포에서 Settings \u0026gt; Pages로 이동하시면 Source 브랜치를 설정할 수 있습니다. 여기 브랜치를 gh-pages로 설정해주시면 됩니다! Hugo Config BaseUrl 수정 config.yaml 혹은 config.toml에 baseURL 필드를 https://\u0026lt;USERNAME\u0026gt;.github.io로 변경하면 됩니다!\nbaseURL: \u0026#34;https://\u0026lt;USERNAME\u0026gt;.github.io\u0026#34; 위 설정을 하지 않으면 동작하지 않으니 꼭 해주세요! 그리고 바뀐 config 설정을 다시 main 브랜치에 push를 넣으면 Github Action에서 자동으로 배포하게 됩니다!\nAction 동작 과정은 레포의 Action 탭에서 확인하실 수 있어요!\n마치며 앞으로 다른 분들도 여러 분들의 블로그에 방문할 수 있게 됐습니다! 여러분들도 많은 정보를 공유하고 이번 기회에 기록을 남겨보세요 ㅎㅎ 많은 도움이 된답니다.\n다음으로는 지금 제 포스트 하단에 댓글 창이 보이실텐데요. 이 댓글 창을 추가하는 방법과 Google Analytics 연동 방법 그리고 Hugo 블로그의 config를 암호화해서 github 레포에 올리는 방법에 대해 소개드려보겠습니다.\n또 만나요!\n","permalink":"https://kzeoh.github.io/posts/make-blog2/","summary":"블로그 만들기 시리즈 눌러서 열기 1. Hugo로 블로그 만들기 2. Github 페이지 연결하기 3. TBD Hugo를 Github Page(개인 블로그)로 배포하고 이 배포 과정을 Github Action Wor","title":"Hugo 블로그를 Github 페이지에 연결하기"},{"content":"블로그 만들기 시리즈 눌러서 열기 1. Hugo로 블로그 만들기 2. Github 페이지 연결하기 3. TBD 많은 개발자 분들이 최근에는 자신의 블로그를 개설하는 것이 하나의 포트폴리오가 될 정도로 안하시는 분이 없는 것 같아요!\n개발자들은 또 좋은 정보가 있으면 공유하고자 하는 마인드셋이 갖추어진 분들이라 (오픈소스를 통한 쉐어링) 블로그에 많은 팁들을 공유해주시더라고요.\n저 또한 많은 분들이 자신의 블로그를 개설해서 자신을 드러내고 많은 정보를 같이 공유하면 좋겠다는 마음에 블로그를 만드는 법을 소개해보려고 합니다!\n전체적인 플로으로 Hugo라는 프레임워크를 통해 깃허브 블로그를 어떻게 만드는지에 대해 알려드리려고 하고요. 지금 제 블로그도 Hugo로 만들어 졌는데 어떤 과정으로 만들어 졌는지 하나씩 알려드릴게요~ 이 포스트에는 일단 Hugo로 static site를 만드는 법에 대해 소개합니다.\n사전 설치 환경은 macOS를 기준으로 설명드립니다!\n일단 Hugo로 블로그를 만들기 위해서는 git과 hugo를 설치해야 합니다.\n# 설치 $ brew install git $ brew install hugo # 확인 $ git version git version 2.36.1 $ hugo version hugo v0.100.2+extended darwin/amd64 BuildDate=unknown Hugo 사이트 만들기 # 작업 폴더로 이동 $ cd $WORK_DIR # hugo site 틀 생성 $ hugo new site myblog Congratulations! Your new Hugo site is created in /YOUR/WORKING/DIR/myblog. Just a few more steps and you\u0026#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; command. 2. Perhaps you want to add some content. You can add single files with \u0026#34;hugo new \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 3. Start the built-in live server via \u0026#34;hugo server\u0026#34;. Visit https://gohugo.io/ for quickstart guide and full documentation. myblog라는 디렉토리가 생겼을텐데요. 구조는 아래와 같습니다.\nmyblog $ tree -a ./ ./ ├── archetypes │ └── default.md ├── config.toml ├── content ├── data ├── layouts ├── public ├── static └── themes 7 directories, 2 files Theme 추가 이제 사이트에 적용할 theme을 직접 만들거나 이미 만들어진 템플릿을 쓸 수가 있는데요. hugo theme 같은 경우에는 많은 사용자들이 만들어논 이쁜 테마가 많아서 이미 만들어진 걸 활용하면 편합니다! hugo theme site에 가시면 여러 free 테마를 보실 수 있는데 이 튜토리얼에서는 hugo-theme-stack 테마를 적용해보겠습니다!\n참고로 블로그에 적용 중인 theme은 PaperMod입니다.\n$ pwd /YOUR/WORKING/DIR/myblog $ git init $ git clone https://github.com/CaiJimmy/hugo-theme-stack.git themes/hugo-theme-stack git submodule add를 활용하시면 git clone 보다 더 우아하게 테마를 적용하실 수 있습니다. (git repo 내에서 관리도 편하고요)\n그리고 config.toml을 열어 theme='hugo-theme-stack'을 추가해줍니다.\nbaseURL = \u0026#39;http://example.org/\u0026#39; languageCode = \u0026#39;en-us\u0026#39; title = \u0026#39;My New Hugo Site\u0026#39; theme = \u0026#39;hugo-theme-stack\u0026#39; 첫 포스트 추가 $ hugo new posts/first-post.md Content \u0026#34;/YOUR/WORKING/DIR/myblog/content/posts/first-post.md\u0026#34; created 위 명령어를 통해 first-post.md라는 파일이 만들어지고 이 파일의 내용을 살펴보면 아래와 같습니다. hugo에서 post들은 markdown으로 작성하게 됩니다! markdown은 개발자라면 익숙해지시는걸 권장드려요!!!\n--- title: \u0026#34;First Post\u0026#34; date: 2022-06-22T23:03:07+09:00 draft: true --- 여기서 draft는 실제 배포된 환경에서는 노출되지 않는데요. 임시 블로그 포스트 느낌이라고 보면 될 것 같아요.\nHugo server 시작 이제 지금까지 만들어진 내용이 어떻게 보이는지 확인을 해볼 차례입니다!\n$ hugo server -D Start building sites … hugo v0.100.2+extended darwin/amd64 BuildDate=unknown | EN -------------------+----- Pages | 10 Paginator pages | 0 Non-page files | 0 Static files | 0 Processed images | 5 Aliases | 4 Sitemaps | 1 Cleaned | 0 Built in 78 ms ... Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop hugo server -D를 입력하시면 hugo server가 시작됩니다. http://localhost:1313에 접속하시면 local 환경의 웹서버에서 어떻게 실행 중인지 확인이 가능해요! 그러면 위와 같이 블로그가 뜨는걸 확인하실 수 있습니다!\n테마 커스터마이징 테마를 커스터마이징 하려면 config.toml을 수정하시면 되는데요. 저는 toml보단 yaml 형태의 포맷이 더 익숙해서 config.yaml을 수정해서 커스터마이징 해보겠습니다. (Hugo에서는 yaml도 지원합니다) hugo-theme-stack에서 themes/hugo-theme-stack/exampleSite 디렉토리 예제로 제공해주는 config.yaml을 적용해보도록 할게요! 예제 config.yaml 그리고 추가로 예제 post들이 있어서 그것도 옮겨보겠습니다!\n$ cp themes/hugo-theme-stack/exampleSite/config.yaml ./ $ cp themes/hugo-theme-stack/exampleSite/content/ ./ 그리고 다시 hugo server -D를 실행하면 아래와 같이 블로그가 완성되는걸 보실 수 있습니다!! static page 웹사이트 구성 $ hugo -D 위 명령어를 수행하시면 ./public 디렉토리에 static site 코드를 생성해줍니다. 그럼 만들어진 이 코드를 배포해서 hosting 하면 자신의 블로그가 완성됩니다!\n마치며 다음 포스트에는 github page를 활용해서 hugo로 만든 static site를 호스팅 하는 법에 대해서 소개해드릴게요.\n그 전까지는 원하시는 블로그에 적용할 테마를 살펴보시고 커스터마이징 가능한 기능들을 살펴보시길 바래요!\n대부분 커스터마이징 가능한 기능들은 각 테마의 공식 github 레포에 자세히 설명되어 있는 경우가 많습니다 :)\n그리고 hugo로 포스트를 작성하는 법에도 익숙해지시면 좋습니다~\n다음 포스트에서 뵐게요\n","permalink":"https://kzeoh.github.io/posts/make-blog/","summary":"블로그 만들기 시리즈 눌러서 열기 1. Hugo로 블로그 만들기 2. Github 페이지 연결하기 3. TBD 많은 개발자 분들이 최근에는 자신의 블로그를 개설하는 것이 하나의 포트폴리오","title":"Hugo로 블로그 만들기"},{"content":"다시 블로그를 확인해보니 터져있네요\u0026hellip;\n터진김에 새로운 테마로 리뉴얼 작업을 들어가려고 합니다.\n블로그를 리뉴얼 작업을 진행하면서 hugo로 블로그를 어떻게 만드는지도 같이 소개해보겠습니다.\n","permalink":"https://kzeoh.github.io/posts/my-first-post/","summary":"다시 블로그를 확인해보니 터져있네요\u0026hellip; 터진김에 새로운 테마로 리뉴얼 작업을 들어가려고 합니다. 블로그를 리뉴얼 작업을 진행하면서 hugo로 블","title":"블로그 리뉴얼"}]